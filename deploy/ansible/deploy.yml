---
- name: Deploy to EKS
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    ns: vehicle
    app_name: vehicle-app

    # Jenkins passes -e deploy_image="docker.io/kiyaye1/vehicle-oop:<tag>"
    image_latest: "{{ deploy_image | default('docker.io/kiyaye1/vehicle-oop:latest') }}"

    # Prefer DH_USER/DH_PASS set by Jenkins Deploy stage; fall back for manual runs
    docker_user: "{{ lookup('env','DH_USER') | default(lookup('env','DOCKER_USER'), true) | default('', true) }}"
    docker_pass: "{{ lookup('env','DH_PASS') | default(lookup('env','DOCKER_PASS'), true) | default('', true) }}"

    eks_cluster: "{{ lookup('env','EKS_CLUSTER') | default('vehicle-eks') }}"
    aws_region: "{{ lookup('env','AWS_DEFAULT_REGION') | default('us-east-2') }}"

    # Jenkins sets DB_HOST via credential "db-host"
    db_host: "{{ lookup('env','DB_HOST') | default('', true) }}"
    db_user: "{{ lookup('env','DB_USER') | default('system') }}"
    db_pass: "{{ lookup('env','DB_PASSWORD') | default('Eyotekonjo12') }}"
    db_url: "jdbc:oracle:thin:@//{{ db_host }}:1521/XEPDB1"

  tasks:
    # ---------- Preflight ----------
    - name: Configure kubeconfig for EKS
      command: aws eks update-kubeconfig --name {{ eks_cluster }} --region {{ aws_region }}
      changed_when: true

    - name: Fail if Docker Hub creds missing
      fail:
        msg: "Docker Hub credentials (DH_USER/DH_PASS) are empty; set them in the Jenkins Deploy stage."
      when: docker_user | length == 0 or docker_pass | length == 0

    - name: Fail if DB_HOST is missing
      fail:
        msg: "DB_HOST is empty; set Jenkins credential 'db-host' to the DB private IP and pass it via env."
      when: db_host | length == 0

    # ---------- K8s resources ----------
    - name: Create namespace
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../k8s/namespace.yaml"

    - name: Ensure Docker Hub pull secret
      shell: |
        kubectl -n {{ ns }} delete secret dockerhub-creds --ignore-not-found
        kubectl -n {{ ns }} create secret docker-registry dockerhub-creds \
          --docker-server='https://index.docker.io/v1/' \
          --docker-username='{{ docker_user }}' \
          --docker-password='{{ docker_pass }}' \
          --docker-email='none@example.com'
      changed_when: true

    - name: Create/Update DB secret (stringData)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: db-secret
            namespace: "{{ ns }}"
          type: Opaque
          stringData:
            SPRING_DATASOURCE_URL: "{{ db_url }}"
            SPRING_DATASOURCE_USERNAME: "{{ db_user }}"
            SPRING_DATASOURCE_PASSWORD: "{{ db_pass }}"
            SPRING_DATASOURCE_DRIVER_CLASS_NAME: "oracle.jdbc.OracleDriver"

    - name: Apply Service
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../k8s/service.yaml"

    - name: Apply Deployment (base manifest)
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../k8s/deployment.yaml"

    # Force the deployment to use the just-built image (container name is "vehicle")
    - name: Set image on Deployment to {{ image_latest }}
      shell: kubectl -n {{ ns }} set image deploy/{{ app_name }} vehicle={{ image_latest }} --record
      register: setimg
      changed_when: "'image updated' in setimg.stdout or setimg.rc == 0"
      failed_when: setimg.rc not in [0]

    - name: Wait for rollout
      shell: kubectl -n {{ ns }} rollout status deploy/{{ app_name }} --timeout=300s
      register: rollout
      changed_when: false

    # ---------- Output public URL ----------
    - name: Wait for Service EXTERNAL-IP
      retries: 30
      delay: 10
      shell: kubectl -n {{ ns }} get svc vehicle-svc -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'
      register: svc_ip
      until: svc_ip.stdout is match(".*")
      changed_when: false

    - name: Show final URL
      debug:
        msg: |
          Service: vehicle-svc
          EXTERNAL: {{ svc_ip.stdout }}
          URL: http://{{ svc_ip.stdout }}/
